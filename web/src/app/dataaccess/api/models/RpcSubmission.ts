/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.5.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RpcSubmissionProblemSnippet } from './RpcSubmissionProblemSnippet';
import {
    RpcSubmissionProblemSnippetFromJSON,
    RpcSubmissionProblemSnippetFromJSONTyped,
    RpcSubmissionProblemSnippetToJSON,
    RpcSubmissionProblemSnippetToJSONTyped,
} from './RpcSubmissionProblemSnippet';
import type { RpcSubmissionStatus } from './RpcSubmissionStatus';
import {
    RpcSubmissionStatusFromJSON,
    RpcSubmissionStatusFromJSONTyped,
    RpcSubmissionStatusToJSON,
    RpcSubmissionStatusToJSONTyped,
} from './RpcSubmissionStatus';
import type { RpcUser } from './RpcUser';
import {
    RpcUserFromJSON,
    RpcUserFromJSONTyped,
    RpcUserToJSON,
    RpcUserToJSONTyped,
} from './RpcUser';

/**
 * 
 * @export
 * @interface RpcSubmission
 */
export interface RpcSubmission {
    /**
     * 
     * @type {number}
     * @memberof RpcSubmission
     */
    iD: number;
    /**
     * 
     * @type {RpcSubmissionProblemSnippet}
     * @memberof RpcSubmission
     */
    problem: RpcSubmissionProblemSnippet;
    /**
     * 
     * @type {RpcUser}
     * @memberof RpcSubmission
     */
    author: RpcUser;
    /**
     * 
     * @type {string}
     * @memberof RpcSubmission
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof RpcSubmission
     */
    language: string;
    /**
     * 
     * @type {RpcSubmissionStatus}
     * @memberof RpcSubmission
     */
    status: RpcSubmissionStatus;
    /**
     * 
     * @type {number}
     * @memberof RpcSubmission
     */
    createdTime: number;
}



/**
 * Check if a given object implements the RpcSubmission interface.
 */
export function instanceOfRpcSubmission(value: object): value is RpcSubmission {
    if (!('iD' in value) || value['iD'] === undefined) return false;
    if (!('problem' in value) || value['problem'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('language' in value) || value['language'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdTime' in value) || value['createdTime'] === undefined) return false;
    return true;
}

export function RpcSubmissionFromJSON(json: any): RpcSubmission {
    return RpcSubmissionFromJSONTyped(json, false);
}

export function RpcSubmissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): RpcSubmission {
    if (json == null) {
        return json;
    }
    return {
        
        'iD': json['ID'],
        'problem': RpcSubmissionProblemSnippetFromJSON(json['Problem']),
        'author': RpcUserFromJSON(json['Author']),
        'content': json['Content'],
        'language': json['Language'],
        'status': RpcSubmissionStatusFromJSON(json['Status']),
        'createdTime': json['CreatedTime'],
    };
}

export function RpcSubmissionToJSON(json: any): RpcSubmission {
    return RpcSubmissionToJSONTyped(json, false);
}

export function RpcSubmissionToJSONTyped(value?: RpcSubmission | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'ID': value['iD'],
        'Problem': RpcSubmissionProblemSnippetToJSON(value['problem']),
        'Author': RpcUserToJSON(value['author']),
        'Content': value['content'],
        'Language': value['language'],
        'Status': RpcSubmissionStatusToJSON(value['status']),
        'CreatedTime': value['createdTime'],
    };
}

