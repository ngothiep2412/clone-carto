/* tslint:disable */
/* eslint-disable */
/**
 * API
 * Generated by genpjrpc: v0.5.0
 *
 * The version of the OpenAPI document: v0.0.0-unknown
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RpcGetUserProblemSnippetListRequest } from './RpcGetUserProblemSnippetListRequest';
import {
    RpcGetUserProblemSnippetListRequestFromJSON,
    RpcGetUserProblemSnippetListRequestFromJSONTyped,
    RpcGetUserProblemSnippetListRequestToJSON,
    RpcGetUserProblemSnippetListRequestToJSONTyped,
} from './RpcGetUserProblemSnippetListRequest';

/**
 * 
 * @export
 * @interface RequestBodyOfTheGetUserProblemSnippetListMethod
 */
export interface RequestBodyOfTheGetUserProblemSnippetListMethod {
    /**
     * A String specifying the version of the JSON-RPC protocol. MUST be exactly "2.0".
     * @type {string}
     * @memberof RequestBodyOfTheGetUserProblemSnippetListMethod
     */
    jsonrpc?: RequestBodyOfTheGetUserProblemSnippetListMethodJsonrpcEnum;
    /**
     * An identifier established by the Client.
     * @type {string}
     * @memberof RequestBodyOfTheGetUserProblemSnippetListMethod
     */
    id?: string;
    /**
     * A String containing the name of the method to be invoked.
     * @type {string}
     * @memberof RequestBodyOfTheGetUserProblemSnippetListMethod
     */
    method?: RequestBodyOfTheGetUserProblemSnippetListMethodMethodEnum;
    /**
     * 
     * @type {RpcGetUserProblemSnippetListRequest}
     * @memberof RequestBodyOfTheGetUserProblemSnippetListMethod
     */
    params?: RpcGetUserProblemSnippetListRequest;
}


/**
 * @export
 */
export const RequestBodyOfTheGetUserProblemSnippetListMethodJsonrpcEnum = {
    _20: '2.0'
} as const;
export type RequestBodyOfTheGetUserProblemSnippetListMethodJsonrpcEnum = typeof RequestBodyOfTheGetUserProblemSnippetListMethodJsonrpcEnum[keyof typeof RequestBodyOfTheGetUserProblemSnippetListMethodJsonrpcEnum];

/**
 * @export
 */
export const RequestBodyOfTheGetUserProblemSnippetListMethodMethodEnum = {
    GetUserProblemSnippetList: 'get_user_problem_snippet_list'
} as const;
export type RequestBodyOfTheGetUserProblemSnippetListMethodMethodEnum = typeof RequestBodyOfTheGetUserProblemSnippetListMethodMethodEnum[keyof typeof RequestBodyOfTheGetUserProblemSnippetListMethodMethodEnum];


/**
 * Check if a given object implements the RequestBodyOfTheGetUserProblemSnippetListMethod interface.
 */
export function instanceOfRequestBodyOfTheGetUserProblemSnippetListMethod(value: object): value is RequestBodyOfTheGetUserProblemSnippetListMethod {
    return true;
}

export function RequestBodyOfTheGetUserProblemSnippetListMethodFromJSON(json: any): RequestBodyOfTheGetUserProblemSnippetListMethod {
    return RequestBodyOfTheGetUserProblemSnippetListMethodFromJSONTyped(json, false);
}

export function RequestBodyOfTheGetUserProblemSnippetListMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestBodyOfTheGetUserProblemSnippetListMethod {
    if (json == null) {
        return json;
    }
    return {
        
        'jsonrpc': json['jsonrpc'] == null ? undefined : json['jsonrpc'],
        'id': json['id'] == null ? undefined : json['id'],
        'method': json['method'] == null ? undefined : json['method'],
        'params': json['params'] == null ? undefined : RpcGetUserProblemSnippetListRequestFromJSON(json['params']),
    };
}

export function RequestBodyOfTheGetUserProblemSnippetListMethodToJSON(json: any): RequestBodyOfTheGetUserProblemSnippetListMethod {
    return RequestBodyOfTheGetUserProblemSnippetListMethodToJSONTyped(json, false);
}

export function RequestBodyOfTheGetUserProblemSnippetListMethodToJSONTyped(value?: RequestBodyOfTheGetUserProblemSnippetListMethod | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'jsonrpc': value['jsonrpc'],
        'id': value['id'],
        'method': value['method'],
        'params': RpcGetUserProblemSnippetListRequestToJSON(value['params']),
    };
}

